{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "templateBaseUrl": {
      "type": "string",
      "metadata": {
        "description": "Base uri for nested templates"
      }
    },
    "vmNamespace": {
      "type": "string",
      "metadata": {
        "description": "Unique namespace for cluster"
      }
    },
    "vmCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VMs in cluster"
      }
    },
    "vmConfig": {
      "type": "object",
      "metadata": {
        "description": "Structure with VM config"
      }
    },
    "netConfig": {
      "type": "object",
      "metadata": {
        "description": "Structure with vNet config"
      }
    }
  },
  "variables": {
    "networkApiVersion": "[parameters('netConfig').networkApiVersion]",
    "computeApiVersion": "[parameters('vmConfig').computeApiVersion]",
    "updateDomainCount": "[parameters('vmCount')]",
    "faultDomainCount": 3,
    "location": "[resourceGroup().location]",
    "configHashVm": {
      "Enabled": "[concat(parameters('templateBaseUrl'), '/vm-datadisks-enabled.json')]",
      "Disabled": "[concat(parameters('templateBaseUrl'), '/vm-datadisks-disabled.json')]"
    },
    "configHashVnet": {
      "New": "[concat(parameters('templateBaseUrl'), '/net-vnet.json')]",
      "Existing": "[concat(parameters('templateBaseUrl'), '/net-empty.json')]"
    },
    "templateUrlVnet": "[variables('configHashVnet')[parameters('netConfig').vNetNewOrExisting]]",
    "templateUrlVm": "[variables('configHashVm')[parameters('vmConfig').dataManagedDiskEnabledOrDisabled]]",
    "templateUrlNsg": "[concat(parameters('templateBaseUrl'), '/net-security.json')]",
    "clusterName": "[concat(parameters('vmNamespace'), '-cluster')]",
    "availabilitySetName":"[concat(parameters('vmNamespace'), '-avs')]",
    "publicIPAddressName": "[concat(parameters('vmNamespace'), '-ip')]",
    "subnetExtIndex": "[parameters('netConfig').subnetLbExtIndex]",
    "subnetIntIndex": "[parameters('netConfig').subnetLbIntIndex]",
    "loadBalancerName": "[concat(parameters('vmNamespace'), '-lb')]",
    "loadBalancerId": "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]",
    "fePoolName": "[concat(parameters('vmNamespace'), '-pool-front')]",
    "bePoolName": "[concat(parameters('vmNamespace'), '-pool-back')]",
    "natStartPort": 22000
  },
  "resources": [
    {
      "name": "[concat(parameters('vmNamespace'), '-deployment-vnet')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('templateUrlVnet')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[parameters('templateBaseUrl')]"
          },
          "netConfig": {
            "value": "[parameters('netConfig')]"
          }
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat(parameters('vmNamespace'), '-deployment-nsg')]",
        "[concat(parameters('vmNamespace'), '-deployment-vnet')]"
      ],
      "properties": {
        "publicIPAllocationMethod": "[parameters('netConfig').publicIPAddressType]",
        "dnsSettings": {
          "domainNameLabel": "[variables('clusterName')]"
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('fePoolName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "copy": {
        "name": "[concat(parameters('vmNamespace'), '-loop-lb-nat-ssh')]",
        "count": "[parameters('vmCount')]"
      },
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('loadBalancerName'), '/', 'NAT-SSH0', copyIndex())]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('loadBalancerId'),'/frontendIPConfigurations/', variables('fePoolName'))]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(variables('natStartPort'))]",
        "backendPort": "22",
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "copy": {
        "name": "[concat(parameters('vmNamespace'), '-loop-lb-probes')]",
        "count": "[length(parameters('netConfig').lbServices)]"
      },
      "type": "Microsoft.Network/loadBalancers/probes",
      "name": "[concat(variables('loadBalancerName'), '/', 'PRB-', parameters('netConfig').lbServices[copyIndex()].svcName)]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]"
      ],
      "properties": {
        "protocol": "[parameters('netConfig').lbServices[copyIndex()].svcProtocol]",
        "port": "[parameters('netConfig').lbServices[copyIndex()].svcPort]",
        "intervalInSeconds": 5,
        "numberOfProbes": 2
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "copy": {
        "name": "[concat(parameters('vmNamespace'), '-loop-lb-rules')]",
        "count": "[length(parameters('netConfig').lbServices)]"
      },
      "type": "Microsoft.Network/loadBalancers/loadBalancingRules",
      "name": "[concat(variables('loadBalancerName'), '/', 'RULE-',parameters('netConfig').lbServices[copyIndex()].svcName)]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat(variables('loadBalancerId'), '/probes/', parameters('netConfig').lbServices[copyIndex()].svcName)]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[concat(variables('loadBalancerId'),'/frontendIPConfigurations/', variables('fePoolName'))]"
        },
        "backendAddressPool": {
          "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/', variables('bePoolName'))]"
        },
        "protocol": "[parameters('netConfig').lbServices[copyIndex()].svcProtocol]",
        "frontendPort": "[parameters('netConfig').lbServices[copyIndex()].svcPort]",
        "backendPort": "[parameters('netConfig').lbServices[copyIndex()].svcPort]",
        "enableFloatingIP": false,
        "idleTimeoutInMinutes": "[parameters('netConfig').lbServices[copyIndex()].svcInterval]",
        "probe": {
          "id": "[concat(variables('loadBalancerId'), '/probes/', 'PRB-', parameters('netConfig').lbServices[copyIndex()].svcName)]"
        }
      }
    },
    {
      "name": "[concat(parameters('vmNamespace'), '-deployment-nsg')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('templateUrlNsg')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[parameters('templateBaseUrl')]"
          },
          "secConfig": {
            "value": {
              "networkApiVersion": "[variables('networkApiVersion')]",
              "secNamespace": "[parameters('vmNamespace')]",
              "secCount": "[parameters('vmCount')]",
              "secRules": "[parameters('netConfig').networkSecurityRules]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "type": "Microsoft.Network/networkInterfaces",
      "copy": {
        "name": "[concat(parameters('vmNamespace'), '-loop-nic')]",
        "count": "[parameters('vmCount')]"
      },
      "name": "[concat(parameters('vmNamespace'), copyIndex(), '-nic')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat(parameters('vmNamespace'), '-deployment-nsg')]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatRules/', 'NAT-SSH00')]"
      ],
      "properties": {
        "networkSecurityGroup": {
         "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('vmNamespace'), copyIndex(), '-nsg'))]"
        },
        "ipConfigurations": [
          {
            "name": "[concat(parameters('vmNamespace'), copyIndex(), '-ipcfg')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[concat(reference(concat(parameters('vmNamespace'), '-deployment-vnet')).outputs.vNetId.value, '/subnets/', parameters('netConfig').vNetSubnets[variables('subnetIntIndex')].name)]"
              },
              "loadBalancerBackendAddressPools": [
                { "id": "[concat(variables('loadBalancerId'), '/backendAddressPools/', variables('bePoolName'))]" }
              ],
              "loadBalancerInboundNatRules": [
                { "id": "[concat(variables('loadBalancerId'), '/inboundNatRules/', 'NAT-SSH0', copyIndex())]" }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetName')]",
      "apiVersion": "[variables('computeApiVersion')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "PlatformUpdateDomainCount": "[variables('updateDomainCount')]",
        "PlatformFaultDomainCount": "[variables('faultDomainCount')]"
      },
      "sku": {
        "name": "Aligned"
      }
    },
    {
      "name": "[concat(parameters('vmNamespace'), '-deployment-vms')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', parameters('vmNamespace'), '0-nic')]"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('templateUrlVm')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "templateBaseUrl": {
            "value": "[parameters('templateBaseUrl')]"
          },
          "vmNamespace": {
            "value": "[parameters('vmNamespace')]"
          },
          "vmCount": {
            "value": "[parameters('vmCount')]"
          },
          "vmConfig": {
            "value": "[parameters('vmConfig')]"
          }
        }
      }
    }
  ],
  "outputs": {
    "clusterFQDN": {
      "value": "[concat(reference(resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName')),providers('Microsoft.Network', 'publicIPAddresses').apiVersions[0]).dnsSettings.fqdn)]",
      "type": "string"
    }
  }
}
